# syntax = docker/dockerfile:1
# This Dockerfile uses multi-stage build to customize DEV and PROD images:
# https://docs.docker.com/develop/develop-images/multistage-build/

################################################################################
FROM ghcr.io/osgeo/gdal:alpine-small-latest AS python-base

LABEL org.opencontainers.image.name="Wodore Backend Alpine"
LABEL org.opencontainers.image.authors="tb@wodore.com"
LABEL org.opencontainers.image.url=https://wodore.com
LABEL org.opencontainers.image.source=https://github.com/wodore/wodore-backend
LABEL org.opencontainers.image.description="Wodore backend based on alpine (gdal) image"
LABEL org.opencontainers.image.licenses=MIT


# `DJANGO_ENV` arg is used to make prod / dev builds:
ARG DJANGO_ENV \
  # Needed for fixing permissions of files created by Docker:
  UID=1001 \
  GID=1001 \
  PYTHON_VERSION=3.12 \
  CONFIG_DIR="config" \
  WITH_DEV=0

ENV DJANGO_ENV=${DJANGO_ENV} \
  # python:
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PYTHONDONTWRITEBYTECODE=1

#SHELL ["/bin/bash", "-eo", "pipefail", "-c"]

WORKDIR /code

#RUN --mount=type=ssh bundle install

# RUN apk add --no-cache \
#     bash
#


# System deps (we don't use exact versions because it is hard to update them,
# pin when needed):
# hadolint ignore=DL3008
RUN <<EOF
apk update
apk upgrade
apk add --no-cache \
  bash \
  python3=~$PYTHON_VERSION
# add user and group
addgroup -g "${GID}"  web
adduser -h '/code' -G web -D -u "${UID}" --no-create-home web
EOF

################################################################################
## BUILDER
FROM python-base AS builder

#build-essential \

# System deps (we don't use exact versions because it is hard to update them,
# pin when needed):
# hadolint ignore=DL3008
RUN <<EOF
apk update
apk upgrade
apk add --no-cache \
  build-base \
  git \
  openssh-client \
  libpq-dev \
  gcc  \
  python3-dev=~$PYTHON_VERSION \
  musl-dev  \
  linux-headers \
  cargo \
  cargo-auditable \
	libgit2-dev
  #poetry=~${POETRY_VERSION} \
# Installing `poetry` package manager:
# https://github.com/python-poetry/poetry
# && curl -sSL 'https://install.python-poetry.org' | python - \
#poetry --version
EOF

COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# - Silence uv complaining about not being able to use hard links,
# - tell uv to byte-compile packages for faster application startups,
# - prevent uv from accidentally downloading isolated Python builds,
# - pick a Python (use `/usr/bin/python3.12` on uv 0.5.0 and later),
# - and finally declare `/app` as the target for `uv sync`.
ENV UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    UV_PYTHON_DOWNLOADS=never \
    UV_PYTHON_PREFERENCE=only-system \
    UV_CACHE_DIR='/var/cache/uv-cache/' \
    UV_PYTHON=python$PYTHON_VERSION
    #UV_PROJECT_ENVIRONMENT=/app

WORKDIR /code

# Copy only requirements, to cache them in docker layer
COPY --chown=web:web ./uv.lock ./pyproject.toml ./docker/django/minify_venv.sh /code/

# Download public key for github.com
RUN --mount=type=cache,target="$UV_CACHE_DIR" \
    --mount=type=secret,id=READ_GITHUB_TOKEN,env=READ_GITHUB_TOKEN \
    --mount=type=secret,id=READ_GITHUB_USER,env=READ_GITHUB_USER <<EOF
if [ "$READ_GITHUB_TOKEN" != "" ]; then
  git config --global url."https://${READ_GITHUB_USER}:${READ_GITHUB_TOKEN}@github.com".insteadOf ssh://git@github.com
  extra_arg="--extra private"
  echo "!! install with PRIVATE packages !!"
else
  extra_arg=""
  echo "!! install with PUBLIC packages !!"
fi
# Install deps:
#poetry run pip install -U pip
uv sync \
  $(if [ "$WITH_DEV" = "0" ]; then echo '--no-dev'; fi) \
  --no-install-project --locked $extra_arg
chmod +x ./minify_venv.sh
./minify_venv.sh
EOF

################################################################################
## PRODUCTION
FROM python-base AS production

ADD --chown=web:web https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh /usr/local/bin/wait-for-it
# this packages are required by geodjango
# System deps (we don't use exact versions because it is hard to update them,
# pin when needed):
# hadolint ignore=DL3008
RUN <<EOF
apk update
apk upgrade
apk add --no-cache \
  postgresql-client \
  geos \
  gettext \
  tini \
  tzdata
cp /usr/share/zoneinfo/Europe/Zurich /etc/localtime
echo "Europe/Zurich" > /etc/timezone
chmod +x /usr/local/bin/wait-for-it
EOF

ENV VIRTUAL_ENV=/code/.venv \
  PATH="/code/.venv/bin:$PATH" \
  TZ="Europe/Zurich"

WORKDIR /code
COPY --from=builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}
# This is a special case. We need to run this script as an entry point:
COPY ./docker/django/entrypoint.sh /docker-entrypoint.sh
COPY --chown=web:web ./manage.py /code/
COPY --chown=web:web server /code/server
# TODO: collectstatic in build process and copy from there!
#COPY --chown=web:web static /code/static
COPY --chown=web:web ${CONFIG_DIR} /code/config

# Setting up proper permissions:
#RUN --mount=type=secret,id=env,target=/code/config/.env \
#  chmod +x '/docker-entrypoint.sh' \
#  && python manage.py collectstatic --noinput
RUN <<EOF
chmod +x '/docker-entrypoint.sh'
python manage.py collectstatic --noinput
EOF

# Running as non-root user:
# TODO
USER web

#ENTRYPOINT ["sleep", "3600"] # use "docker compose exec web sh" to connect

# We customize how our app is loaded with the custom entrypoint:
ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]
