# syntax = docker/dockerfile:1
# This Dockerfile uses multi-stage build to customize DEV and PROD images:
# https://docs.docker.com/develop/develop-images/multistage-build/

#FROM python:3.11.5-slim-bookworm AS python-base
FROM ghcr.io/osgeo/gdal:ubuntu-small-latest AS python-base

LABEL org.opencontainers.image.name="Wodore Backend Ubuntu"
LABEL org.opencontainers.image.authors="tb@wodore.com"
LABEL org.opencontainers.image.url=https://wodore.com
LABEL org.opencontainers.image.source=https://github.com/wodore/wodore-backend
LABEL org.opencontainers.image.description="Wodore backend based on ubuntu (gdal) image"
LABEL org.opencontainers.image.licenses=MIT


# `DJANGO_ENV` arg is used to make prod / dev builds:
ARG DJANGO_ENV \
  # Needed for fixing permissions of files created by Docker:
  UID=1001 \
  GID=1001 \
  CONFIG_DIR="config" \
  WITH_DEV=0

ENV DJANGO_ENV=${DJANGO_ENV} \
  # python:
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PYTHONDONTWRITEBYTECODE=1 \
  # pip:
  PIP_NO_CACHE_DIR=1 \
  PIP_DISABLE_PIP_VERSION_CHECK=1 \
  PIP_DEFAULT_TIMEOUT=100 \
  PIP_ROOT_USER_ACTION=ignore \
  # tini:
  TINI_VERSION=v0.19.0 \
  # poetry:
  POETRY_VERSION=1.8.2 \
  POETRY_NO_INTERACTION=1 \
  POETRY_VIRTUALENVS_IN_PROJECT=1 \
  POETRY_VIRTUALENVS_CREATE=1 \
  POETRY_CACHE_DIR='/var/cache/pypoetry' \
  POETRY_HOME='/usr/local'

SHELL ["/bin/bash", "-eo", "pipefail", "-c"]

WORKDIR /code

#RUN --mount=type=ssh bundle install

RUN groupadd -g "${GID}" -r web \
  && useradd -d '/code' -g web -l -r -u "${UID}" web



## BUILDER
FROM python-base AS builder-base

# System deps (we don't use exact versions because it is hard to update them,
# pin when needed):
# hadolint ignore=DL3008
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
  rm -f /etc/apt/apt.conf.d/docker-clean \
  && apt-get update && apt-get upgrade -y \
  && apt-get install -y --no-install-recommends \
    bash \
    brotli \
    build-essential \
    curl \
    gettext \
    git \
    openssh-client \
    libpq-dev \
    binutils \
  # Installing `tini` utility:
  # https://github.com/krallin/tini
  # Get architecture to download appropriate tini release:
  # See https://github.com/wemake-services/wemake-django-template/issues/1725
  && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" \
  && curl -o /usr/local/bin/tini -sSLO "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-${dpkgArch}" \
  && chmod +x /usr/local/bin/tini && tini --version \
  # Installing `poetry` package manager:
  # https://github.com/python-poetry/poetry
  && curl -sSL 'https://install.python-poetry.org' | python - \
  && poetry --version \
  # Cleaning cache:
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && apt-get clean -y && rm -rf /var/lib/apt/lists/*


WORKDIR /code

# Copy only requirements, to cache them in docker layer
COPY --chown=web:web ./poetry.lock ./pyproject.toml ./docker/django/minify_venv.sh /code/

# Download public key for github.com
RUN --mount=type=cache,target="$POETRY_CACHE_DIR" --mount=type=ssh \
  mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts \
  # Install deps:
  && poetry run pip install -U pip \
  && poetry install \
   $(if [ "$WITH_DEV" = '0' ]; then echo '--only main'; fi) \
  --no-root --no-interaction --no-ansi --sync --extras private \
  && chmod +x minify_venv.sh \
  && ./minify_venv.sh

################################################################################
## PRODUCTION
FROM python-base AS production

# this packages are required by geodjango
# System deps (we don't use exact versions because it is hard to update them,
# pin when needed):
# hadolint ignore=DL3008
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
  rm -f /etc/apt/apt.conf.d/docker-clean \
  && apt-get update && apt-get upgrade -y \
  && apt-get install -y --no-install-recommends \
    wait-for-it \
    tzdata \
  # Cleaning cache:
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && apt-get clean -y && rm -rf /var/lib/apt/lists/* \
  && cp /usr/share/zoneinfo/Europe/Zurich /etc/localtime \
  && echo "Europe/Zurich" > /etc/timezone

ENV VIRTUAL_ENV=/code/.venv \
  PATH="/code/.venv/bin:$PATH" \
  TZ="Europe/Zurich"

WORKDIR /code
COPY --from=builder-base ${VIRTUAL_ENV} ${VIRTUAL_ENV}
COPY --from=builder-base "/usr/local/bin/tini" "/usr/local/bin/tini"


# This is a special case. We need to run this script as an entry point:
COPY ./docker/django/entrypoint.sh /docker-entrypoint.sh
COPY --chown=web:web ./manage.py /code/
COPY --chown=web:web server /code/server
# TODO: collectstatic in build process and copy from there!
#COPY --chown=web:web static /code/static 
COPY --chown=web:web ${CONFIG_DIR} /code/config

# Setting up proper permissions:
RUN chmod +x '/docker-entrypoint.sh' \
  && python manage.py collectstatic --noinput

# Running as non-root user:
# TODO
USER web

#ENTRYPOINT ["sleep", "3600"] # use "docker compose exec web sh" to connect

# We customize how our app is loaded with the custom entrypoint:
ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]
