# syntax = docker/dockerfile:1
# This Dockerfile uses multi-stage build to customize DEV and PROD images:
# https://docs.docker.com/develop/develop-images/multistage-build/

#FROM python:3.11.5-slim-bookworm AS python-base
FROM ghcr.io/osgeo/gdal:ubuntu-small-latest AS python-base

LABEL org.opencontainers.image.name="Wodore Backend Ubuntu"
LABEL org.opencontainers.image.authors="tb@wodore.com"
LABEL org.opencontainers.image.url=https://wodore.com
LABEL org.opencontainers.image.source=https://github.com/wodore/wodore-backend
LABEL org.opencontainers.image.description="Wodore backend based on ubuntu (gdal) image"
LABEL org.opencontainers.image.licenses=MIT


# `DJANGO_ENV` arg is used to make prod / dev builds:
ARG DJANGO_ENV \
  # Needed for fixing permissions of files created by Docker:
  UID=1001 \
  GID=1001 \
  PYTHON_VERSION=3.12 \
  CONFIG_DIR="config" \
  WITH_DEV=0

ENV DJANGO_ENV=${DJANGO_ENV} \
  # python:
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PYTHONDONTWRITEBYTECODE=1 \
  TINI_VERSION=v0.19.0

SHELL ["/bin/bash", "-eo", "pipefail", "-c"]

WORKDIR /code

#RUN --mount=type=ssh bundle install

RUN <<EOF
groupadd -g "${GID}" -r web
useradd -d '/code' -g web -l -r -u "${UID}" web
EOF



## BUILDER
FROM python-base AS builder-base

# System deps (we don't use exact versions because it is hard to update them,
# pin when needed):
# hadolint ignore=DL3008
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked <<EOF
rm -f /etc/apt/apt.conf.d/docker-clean
apt-get update && apt-get upgrade -y
apt-get install -y --no-install-recommends \
  bash \
  brotli \
  build-essential \
  curl \
  gettext \
  git \
  openssh-client \
  libpq-dev \
  binutils \
  cargo \
# Installing `tini` utility:
# https://github.com/krallin/tini
# Get architecture to download appropriate tini release:
# See https://github.com/wemake-services/wemake-django-template/issues/1725
dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"
curl -o /usr/local/bin/tini -sSLO "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-${dpkgArch}"
chmod +x /usr/local/bin/tini && tini --version
# Cleaning cache:
apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
apt-get clean -y && rm -rf /var/lib/apt/lists/*
EOF

# install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# - Silence uv complaining about not being able to use hard links,
# - tell uv to byte-compile packages for faster application startups,
# - prevent uv from accidentally downloading isolated Python builds,
# - pick a Python (use `/usr/bin/python3.12` on uv 0.5.0 and later),
# - and finally declare `/app` as the target for `uv sync`.
ENV UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    UV_PYTHON_DOWNLOADS=never \
    UV_PYTHON_PREFERENCE=only-system \
    UV_CACHE_DIR='/var/cache/uv-cache/' \
    UV_PYTHON=python$PYTHON_VERSION
    #UV_PROJECT_ENVIRONMENT=/app


WORKDIR /code

# Copy only requirements, to cache them in docker layer
COPY --chown=web:web ./uv.lock ./pyproject.toml ./docker/django/minify_venv.sh /code/

# Download public key for github.com
RUN --mount=type=cache,target="$UV_CACHE_DIR" \
    --mount=type=secret,id=READ_GITHUB_TOKEN,env=READ_GITHUB_TOKEN \
    --mount=type=secret,id=READ_GITHUB_USER,env=READ_GITHUB_USER <<EOF
if [ "$READ_GITHUB_TOKEN" != "" ]; then
  git config --global url."https://${READ_GITHUB_USER}:${READ_GITHUB_TOKEN}@github.com".insteadOf ssh://git@github.com
  extra_arg="--extra private"
  echo "!! install with PRIVATE packages !!"
else
  extra_arg=""
  echo "!! install with PUBLIC packages !!"
fi
# Install deps:
uv sync \
  $(if [ "$WITH_DEV" = "0" ]; then echo '--no-dev'; fi) \
  --no-install-project --locked ${extra_arg}
chmod +x ./minify_venv.sh
./minify_venv.sh
EOF


################################################################################
## PRODUCTION
FROM python-base AS production

# this packages are required by geodjango
# System deps (we don't use exact versions because it is hard to update them,
# pin when needed):
# hadolint ignore=DL3008
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked <<EOF
rm -f /etc/apt/apt.conf.d/docker-clean
apt-get update && apt-get upgrade -y
apt-get install -y --no-install-recommends \
  wait-for-it \
  tzdata
# Cleaning cache:
apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
apt-get clean -y && rm -rf /var/lib/apt/lists/*
cp /usr/share/zoneinfo/Europe/Zurich /etc/localtime
echo "Europe/Zurich" > /etc/timezone
EOF

ENV VIRTUAL_ENV=/code/.venv \
  PATH="/code/.venv/bin:$PATH" \
  TZ="Europe/Zurich"

WORKDIR /code
COPY --from=builder-base ${VIRTUAL_ENV} ${VIRTUAL_ENV}
COPY --from=builder-base "/usr/local/bin/tini" "/usr/local/bin/tini"


# This is a special case. We need to run this script as an entry point:
COPY ./docker/django/entrypoint.sh /docker-entrypoint.sh
COPY --chown=web:web ./manage.py /code/
COPY --chown=web:web server /code/server
# TODO: collectstatic in build process and copy from there!
#COPY --chown=web:web static /code/static
COPY --chown=web:web ${CONFIG_DIR} /code/config

# Setting up proper permissions:
RUN <<EOF
chmod +x '/docker-entrypoint.sh'
python manage.py collectstatic --noinput
EOF

# Running as non-root user:
# TODO
USER web

#ENTRYPOINT ["sleep", "3600"] # use "docker compose exec web sh" to connect

# We customize how our app is loaded with the custom entrypoint:
ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]
