volumes:
  pgdata:
  django-static:
  django-media:
  django-locale:

secrets:
  ssh_id_ed25519:
    #file: $HOME_DIR/.ssh/id_ed25519
    file: ~/.ssh/id_ed25519

services:
  web:
    <<: &web
      container_name: wodore-api
      # Image name is changed in production:
      image: "wodore-backend:stage"

      build:
        #target: development_build
        target: production
        context: .
        dockerfile: ./docker/django/Dockerfile
        secrets:
          - ssh_id_ed25519
        args:
          DJANGO_ENV: development
          WITH_DEV: 0
        #cache_from:
        #  - "wodore-backend:dev"
        #  - "wodore-backend:latest"
        #  - "*"

      restart: unless-stopped
      volumes:
        - django-static:/var/www/django/static
        - django-media:/var/www/django/media  # since in dev it is app's folder
        - django-locale:/code/locale  # since in dev it is app's folder
      depends_on:
        - db
      networks:
        - webnet
        - postgresnet
      #env_file: ./config/.env
      environment:
        DJANGO_DATABASE_HOST: db
      expose:
        - 8000
      command: python -Wd manage.py runserver 0.0.0.0:8000
      #healthcheck:
      #  # We use `$$` here because:
      #  # one `$` goes to shell,
      #  # one `$` goes to `docker-compose.yml` escaping
      #  test: |
      #    /usr/bin/test $$(
      #      /usr/bin/curl --fail http://localhost:8000/health/?format=json
      #      --write-out "%{http_code}" --silent --output /dev/null
      #    ) -eq 200
      #  interval: 10s
      #  timeout: 5s
      #  retries: 5
      #  start_period: 30s

# This task is an example of how to extend existing ones:
#   some_worker:
#     <<: *web
#     command: python manage.py worker_process

networks:
  # Network for postgres, use it for services that need access to the db:
  postgresnet:
  imagor:
  # Network for your internals, use it by default:
  webnet:

