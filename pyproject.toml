[tool.poetry]
name = "wodore"
description = "Wodore Backend"
version = "0.1.0"
readme = "README.md"
authors = ["tb <tb@wodore.com>"]
packages = [{"include"= "server"}]


[tool.poetry.dependencies]
python = "^3.10"

django = { version = "^5.0", extras = ["argon2"] }
django-split-settings = "^1.2"
django-axes = "^5.41"
django-csp = "^3.7"
django-health-check = "^3.16"
django-http-referrer-policy = "^1.1"
django-permissions-policy = "^4.14"
django-stubs-ext = "^4.2"
django-ninja = "^1.0"

psycopg2-binary = "^2.9"
gunicorn = "^20.0"
python-decouple = "^3.8"
structlog = "^23.1"
django-colorfield = "^0.8.0"
pillow = "^9.5.0"
django-model-utils = "^4.3.1"
django-jsoneditor = "^0.2.4"
django-modeltrans = "^0.7.4"
django-jsonform = "^2.17.1"
msgspec = "^0.18.4"
django-grappelli = "^3.0.8"
django-admin-interface = "^0.26.1"
django-admin-volt = "^1.0.10"
django-unfold = "^0.20"
#django-unfold = {git = "https://github.com/unfoldadmin/django-unfold.git", rev = "main"}
#mysqlclient = "^2.2.0"
python-benedict = "^0.33.0"
asyncify = "^0.9.2"
geojson-pydantic = "^1.0.1"
deepdiff = "^6.7.1"
django-countries = "^7.5.1"
unidecode = "^1.3.7"
django-jsonsuit = "^0.5.0"
jinja2 = "^3.1.2"
easydict = "^1.11"
django-computedfields = {git = "https://github.com/TBxy/django-computedfields.git", rev = "django5.0"}
xmltodict = "^0.13.0"
django-extensions = "^3.2.3"
hut-services = {git = "https://github.com/wodore/hut-services.git", rev="main"}
hut-services-private = {git = "ssh://git@github.com/wodore/hut-services-private.git", rev = "main", optional = true}
dickens = "^2.1.1"
django-cors-headers = "^4.3.1"
psycopg = "^3.1.16"
deepl = "^1.16.1"
mozilla-django-oidc = "^4.0.1"
authlib = "^1.3.0"
types-requests = "^2.31.0.20240311"
load-dotenv = "^0.1.0"

[tool.poetry.extras]
private = ["hut-services-private"]


[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "^4.1"
django-querycount = "^0.8"
django-migration-linter = "^4.1"
django-extra-checks = "^0.13"
nplusone = "^1.0"

wemake-python-styleguide = "^0.17"
flake8-pytest-style = "^1.7"
flake8-django = "^1.2"
flake8-logging-format = "^0.9"
nitpick = "^0.33"
doc8 = "^1.0"

pytest = "^7.3"
pytest-django = "^4.5"
pytest-cov = "^4.0"
django-coverage-plugin = "^3.0"
pytest-randomly = "^3.12"
pytest-timeout = "^2.1"
django-test-migrations = "^1.3"
hypothesis = "^6.75"

mypy = "^1.3"
django-stubs = "^4.2"

black = "*"
ruff = "*"

#djlint = "^1.27"
yamllint = "^1.31"
safety = "^2.3"
dotenv-linter = "^0.4"
polint = "^0.4"
dennis = "^1.1"
dump-env = "^1.3"
ipython = "^8.13"
icecream = "^2.1.3"
faker = "^20.1.0"
pyparsing = "^3.1.1"
pydot = "^1.4.2"
werkzeug = "^3.0.1"

[tool.poetry.scripts]
manage = 'manage:main'
app = 'manage:main'

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0"
sphinx-autodoc-typehints = "^1.23"
tomli = "^2.0"


[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"


#[tool.djlint]
#ignore = "H006,H030,H031"
#include = "H017,H035"
#indent = 2
#blank_line_after_tag = "load,extends"
#profile = "django"
#max_line_length = 80
#format_attribute_template_tags = true
#
#
#[tool.nitpick]
#style = "https://raw.githubusercontent.com/wemake-services/wemake-python-styleguide/0.17.0/styles/nitpick-style-wemake.toml"


[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "ext_django", "django" , "unfold", "server", "local-folder"]
single-line-exclusions = ["os", "json", "sys"]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"ext_django" = ["django_countries", "model_utils", "modeltrans"]
"django" = ["django"]
"unfold" = ["unfold"]
"server" = ["server"]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "if typing\\.TYPE_CHECKING:",
]
[tool.coverage.html]
show_contexts = true

[tool.coverage.run]
branch = true
# `parallel` will cause each tox env to put data into a different file, so that we can combine them later
parallel = true
source = ["pytest_store", "tests"]
dynamic_context = "test_function"

[tool.coverage.paths]
# treat these directories as the same when combining
# the first item is going to be the canonical dir
source = [
    "src/pytest_store",
    ".tox/*/lib/python*/site-packages/pytest_store",
]

[tool.ruff]
exclude = ["*migrations/*.py"]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  #"ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
]
target-version = "py38"

unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

#isort.required-imports = ["from __future__ import annotations"]


[tool.mypy]
files = ["server"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[[tool.mypy.overrides]]
module = ["parse", "parse_type"]
ignore_missing_imports = true

