[project]
name = "wodore"
version = "0.1.1"
description = "Wodore Backend"
readme = "README.md"
packages = [{"include"= "server"}]
authors = [
    {email = "tb@wodore.com"},
]
requires-python = "<4.0,>=3.10"

dependencies = [
    "Django[argon2]==5.*", # https://pypi.org/project/Django/
    "django-split-settings==1.*", # https://pypi.org/project/django-split-settings/
    "django-axes==7.*", # https://pypi.org/project/django-axes/
    "django-csp==3.*", # https://pypi.org/project/django-csp/
    "django-health-check==3.*", # https://pypi.org/project/django-health-check/
    "django-http-referrer-policy==1.*", # https://pypi.org/project/django-http-referrer-policy/
    "django-permissions-policy==4.*", # https://pypi.org/project/django-permissions-policy/
    "django-ninja==1.*", # https://pypi.org/project/django-ninja/
    "whitenoise[brotli]==6.*", # https://pypi.org/project/whitenoise/
    "psycopg2-binary==2.*", # https://pypi.org/project/psycopg2-binary/
    "gunicorn==23.*", # https://pypi.org/project/gunicorn/
    "python-decouple==3.*", # https://pypi.org/project/python-decouple/
    "structlog==24.*", # https://pypi.org/project/structlog/
    "django-colorfield==0.11.*", # https://pypi.org/project/django-colorfield/
    "pillow==10.*", # https://pypi.org/project/Pillow/
    "django-model-utils==5.*", # https://pypi.org/project/django-model-utils/
    "django-jsoneditor==0.2.*", # https://pypi.org/project/django-jsoneditor/
    "django-modeltrans==0.8.*", # https://pypi.org/project/django-modeltrans/
    "django-jsonform==2.*", # https://pypi.org/project/django-jsonform/
    "django-cors-headers==4.*", # https://pypi.org/project/django-cors-headers/
    "django-extensions==3.*", # https://pypi.org/project/django-extensions/
    "django-unfold==0.43.*", # https://pypi.org/project/django-unfold/
    "msgspec==0.19.*", # https://pypi.org/project/msgspec/
    "python-benedict==0.34.*", # https://pypi.org/project/python-benedict/
    "asyncify==0.10.*", # https://pypi.org/project/asyncify/
    "geojson-pydantic==1.*", # https://pypi.org/project/geojson-pydantic/
    "deepdiff==8.*", # https://pypi.org/project/deepdiff/
    "django-countries==7.*", # https://pypi.org/project/django-countries/
    "unidecode==1.*", # https://pypi.org/project/unidecode/
    "django-jsonsuit==0.5.*", # https://pypi.org/project/django-jsonsuit/
    "jinja2==3.*", # https://pypi.org/project/Jinja2/
    "easydict==1.*", # https://pypi.org/project/easydict/
    "xmltodict>=0.13.0,<0.14.0", # https://pypi.org/project/xmltodict/
    "dickens==2.*", # https://pypi.org/project/dickens/
    "psycopg==3.*", # https://pypi.org/project/psycopg/
    "mozilla-django-oidc==4.*", # https://pypi.org/project/mozilla-django-oidc/
    "authlib==1.*", # https://pypi.org/project/authlib/
    "load-dotenv==0.1.*", # https://pypi.org/project/load-dotenv/
    "django-cleanup==9.*", # https://pypi.org/project/django-cleanup/
    "rich==13.*", # https://pypi.org/project/rich/
    "tzdata>=2024.0", # https://pypi.org/project/tzdata/
    "click==8.*", # https://pypi.org/project/click/
    "pyyaml==6.*", # https://pypi.org/project/PyYAML/
    # https://github.com/wodore/hut-services
    "hut-services @ git+https://github.com/wodore/hut-services.git@feature/photos", 
    # https://pypi.org/project/django-computedfields/ # https://github.com/TBxy/django-computedfields
    "django-computedfields @ git+https://github.com/TBxy/django-computedfields.git@django5.0", 
]

[project.optional-dependencies]
private = [
    # https://github.com/wodore/hut-services-private
    "hut-services-private @ git+ssh://git@github.com/wodore/hut-services-private.git@main", 
]

[project.scripts]
manage = "manage:main"
app = "manage:main"

[dependency-groups]
dev = [
    "django-debug-toolbar~=4.1",
    "django-querycount~=0.8",
    "django-migration-linter~=4.1",
    "django-extra-checks~=0.15",
    "django-stubs-ext~=4.2",
    "nplusone~=1.0",
    "wemake-python-styleguide~=0.17",
    "flake8-pytest-style~=1.7",
    "flake8-django~=1.2",
    "flake8-logging-format~=0.9",
    "nitpick~=0.33",
    "doc8~=1.0",
    "pytest~=7.3",
    "pytest-django~=4.5",
    "pytest-cov~=4.0",
    "django-coverage-plugin~=3.0",
    "pytest-randomly~=3.12",
    "pytest-timeout~=2.1",
    "django-test-migrations~=1.3",
    "hypothesis~=6.75",
    "mypy~=1.3",
    "django-stubs~=4.2",
    "types-requests~=2.31.0.20240311",
    "typing-extensions~=4.12.2",
    "black",
    "ruff",
    "yamllint~=1.31",
    "safety~=2.3",
    "dotenv-linter~=0.4",
    "polint~=0.4",
    "dennis~=1.1",
    "dump-env~=1.3",
    "ipython~=8.13",
    "icecream~=2.1.3",
    "faker~=20.1.0",
    "pyparsing~=3.1.1",
    "pydot~=1.4.2",
    "werkzeug~=3.0.1",
    "locust~=2.32.4",
]

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "ext_django", "django" , "unfold", "server", "local-folder"]
single-line-exclusions = ["os", "json", "sys"]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"ext_django" = ["django_countries", "model_utils", "modeltrans"]
"django" = ["django"]
"unfold" = ["unfold"]
"server" = ["server"]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "if typing\\.TYPE_CHECKING:",
]
[tool.coverage.html]
show_contexts = true

[tool.coverage.run]
branch = true
# `parallel` will cause each tox env to put data into a different file, so that we can combine them later
parallel = true
source = ["pytest_store", "tests"]
dynamic_context = "test_function"

[tool.coverage.paths]
# treat these directories as the same when combining
# the first item is going to be the canonical dir
source = [
    "src/pytest_store",
    ".tox/*/lib/python*/site-packages/pytest_store",
]

[tool.ruff]
exclude = ["*migrations/*.py"]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  #"ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
]
target-version = "py38"

unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

#isort.required-imports = ["from __future__ import annotations"]


[tool.mypy]
files = ["server"]
disallow_untyped_defs = "False"
disallow_any_unimported = "False"
check_untyped_defs = "False"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"
no_implicit_optional = "False"
ignore_errors = "True"
#ignore_errors = [
#     "var-annotated",
# ]

[[tool.mypy.overrides]]
module = ["parse", "parse_type"]
ignore_missing_imports = true


#[build-system]
#requires = ["hatchling"]
#build-backend = "hatchling.build"
