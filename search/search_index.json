{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Wodore Backend <p> Wodore.com backend implementation </p> <p> wodore.com     | api.wodore.com     | docker images     | docu </p>"},{"location":"#development","title":"Development","text":""},{"location":"#initial-setup","title":"Initial Setup","text":"<p>When first cloning the repository: <pre><code># Install Python packages and set up virtualenv\nmake init\nsource .venv/bin/activate\n</code></pre></p>"},{"location":"#setup","title":"Setup","text":"<p>Activate the virtual environment and install packages: <pre><code>source .venv/bin/activate\n\n# With infisical (recommended) -&gt; see Secrets section\n(.venv) inv install --infisical\n\n# Without infisical\n(.venv) inv install\n\n# View available commands\n(.venv) inv help\n\n# Apply changes\nsource deactivate; source .venv/bin/activate\n</code></pre></p> <p>NOTE: The install command creates <code>.volumes/pgdata/</code> for PostgreSQL data and <code>media/imagor_data/</code> for image processing.</p>"},{"location":"#secrets","title":"Secrets","text":"<p>Secrets are managed with infisical. Install the CLI tool following the installation guide and initialize it: <pre><code>infisical login\ninfisical init\n</code></pre></p> <p>Set up secrets using infisical (recommended): <pre><code>(.venv) inv install --infisical\nsource .venv/bin/activate\n(.venv) app &lt;cmd&gt; # uses infisical\n</code></pre></p> <p>Or use local env files: <pre><code># Export secrets to config/.env (update when secrets change)\ninfisical export --env dev --path /backend &gt;&gt; config/.env\nln -s config/.env .env\n</code></pre></p> <p>Or set up manually: <pre><code># Create and edit env files manually\ncp config/.env.template config/.env\nln -s config/.env .env\n# edit .env\n</code></pre></p> <p>TIP: Add <code>-i/--infisical</code> to <code>inv</code> commands (e.g., <code>run</code>, <code>docker-compose</code>) to use infisical directly.</p>"},{"location":"#start-database-and-image-service","title":"Start Database and Image Service","text":"<p>Start PostgreSQL and Imagor services after each system restart: <pre><code># With infisical (recommended)\n(.venv) inv docker-compose -c \"up -d\" -i\n\n# Without infisical (requires .env file)\n(.venv) inv docker-compose -c \"up -d\"\n</code></pre></p> <p>NOTE: PostgreSQL data is stored in <code>.volumes/pgdata/</code> (development only). To reset the database: <pre><code>rm -rf .volumes/pgdata/*  # Be careful!\n(.venv) inv docker-compose -c \"up -d\"\n</code></pre></p>"},{"location":"#start-application","title":"Start Application","text":"<p>Start the application using the app alias (recommended): <pre><code>(.venv) app migrate\n(.venv) app run -p 8000 # -i # with infisical\n</code></pre></p> <p>Or use invoke with infisical: <pre><code>(.venv) app migrate -i\n(.venv) app run -p 8000 -i\n(.venv) # or written out\n(.venv) inv app.app -i --cmd \"migrate\"\n(.venv) inv app.app -i --cmd \"runserver\"\n</code></pre></p> <p>Or use local env files (requires <code>.env</code> and <code>config/.env</code>): <pre><code>(.venv) inv app.app --cmd \"migrate\"\n(.venv) inv app.app --cmd \"runserver\"\n</code></pre></p> <p>NOTE: The <code>app</code> command expands to if infisical is used: <pre><code>infisical run --env=dev --path /backend --silent --log-level warn -- app &lt;command&gt;\n</code></pre></p>"},{"location":"#load-data","title":"Load Data","text":"<p>Copy hut information from sources, this saves huts information from different sources (e.g. refuges.info, wikidata, open stree map) into the local database <pre><code># Add all available sources\n(.venv) app hut_sources --add --orgs all\n\n# Add specific source (e.g. refuges)\n(.venv) app hut_sources --add --orgs refuges\n</code></pre> Add huts from the previously added sources. If a hut has multiple sources they are combined as good as possible.</p> <pre><code># Add huts from sources (combines data if multiple sources)\n(.venv) app huts --add-all\n</code></pre>"},{"location":"#helpful-commands","title":"Helpful Commands","text":"<p>Common database commands: <pre><code># Apply migrations\n(.venv) app migrate\n\n# Load initial data\n(.venv) app loaddata --app huts organizations\n\n# Squash migrations\n(.venv) app squashmigrations huts 0006 --squashed-name init\n</code></pre></p> <p>Watch and compile Tailwind CSS: <pre><code>npx tailwindcss -i styles.css -o server/apps/manager/static/css/styles.css --minify --watch\n</code></pre></p>"},{"location":"#package-updates","title":"Package Updates","text":"<p>Update all packages: <pre><code>(.venv) inv update # OR\n(.venv) inv update --no-private # do not update private packages (this removes the private packages)\n\n# Update hut-service (private package only)\n(.venv) inv update -p hut-services-private\n(.venv) # uv sync --upgrade-package hut-services-private --extra private\n(.venv) # uv lock\n</code></pre></p>"},{"location":"#changes","title":"Changes","text":"<p>After changes the version in <code>pyproject.toml</code> needs to be updated and the <code>wodore-backend</code> package updated and the docker image published:</p> <pre><code>(.venv) vim pyproject.toml\n(.venv) inv update -p wodore-backend\n(.venv) # uv sync --upgrade-package wodore-backend --extra private\n(.venv) inv docker.build --push # --version-tag\n</code></pre>"},{"location":"#release","title":"Release","text":"<p>For a release run <code>inv release</code>. Merge this change into the <code>main</code> branch, the github action will create a tag and a release.</p>"},{"location":"#docker-production-build","title":"Docker Production Build","text":"<p>Set required environment variables (or add it to the <code>.env</code> file): <pre><code>READ_GITHUB_USER=&lt;username&gt;\nREAD_GITHUB_TOKEN=&lt;token&gt;  # Must have read access\n</code></pre></p> <p>(run <code>infisical export --env dev --path /keys/wodore-backend</code> to export the secrets)</p> <p>Build and run Docker images (default is alpine image): <pre><code># Build main image\n(.venv) inv docker.build [--distro alpine|ubuntu] [-p/--push] [-v/--version-tag]\n\n# Create slim version (optional)\n(.venv) inv docker.slim [--distro alpine|ubuntu]\n\n# Run the container\n(.venv) inv docker.run [--distro alpine|ubuntu] [--slim]\n\n# Publish the container (use -v to include version tags as well, otherwise only 'edge' is pushed)\n(.venv) inv docker.publish [--distro alpine|ubuntu] [--slim] [-v/--version-tag]\n</code></pre></p> <p>NOTE: These commands are deprecated: <pre><code># Export secrets (will be removed)\ninfisical export --env dev --path /backend &gt;&gt; config/.env\n\n# Build staging (use --env=prod for production)\ninfisical run --env=dev --path /backend -- \\\n  docker compose -f docker-compose.yml \\\n  -f docker/docker-compose.stage.yml build web\n</code></pre></p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Required development tools: - <code>python3.12</code> (see <code>pyproject.toml</code>) - <code>postgresql13</code> - <code>docker</code> with <code>docker compose</code> - <code>infisical</code> (installation guide) - <code>poetry</code> (installation guide) - <code>node</code> and <code>npm</code> for Tailwind CSS - <code>make</code> (optional)</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#019-2025-08-21","title":"0.1.9 - 2025-08-21","text":"<p>Initial release.</p>"},{"location":"changelog/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Ignore connection error oicd (#16)</li> <li>Open monthly formfield and green for empty huts (#10)</li> </ul>"},{"location":"changelog/#fixes","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Fix frontend hut link (#11)</li> <li>Fix hut location field missing (#8)</li> </ul>"},{"location":"changelog/#dependencies","title":"\ud83e\uddea Dependencies","text":"<ul> <li>Update python packages (#12, #13, #18)</li> </ul>"},{"location":"changelog/#others","title":"\ud83c\udf00 Others","text":"<ul> <li>Include git hash in docker build (#19)</li> <li>Use <code>READ_DOCKER_TOKEN</code> and <code>READ_DOCKER_USER</code> for private repo access during docker build. (#5)</li> <li>Add docker invoke scripts (#4)</li> <li>Switch from <code>poetry</code> to <code>uv</code> (#1)</li> </ul>"},{"location":"docu/","title":"Docu","text":""},{"location":"docu/#wodore-backend","title":"Wodore Backend","text":"<p>Wodore Backend is the backend implementation of wodore.com.</p>"},{"location":"packages/","title":"Packages","text":""},{"location":"packages/#docker","title":"Docker","text":"<p>Docker images are created with the following tags:</p> <ul> <li><code>latest</code>: latest stable version</li> <li><code>major</code>, <code>major.minor</code> and <code>major.minor.rev</code> tags</li> <li><code>edge</code>: unstable development version</li> </ul> Docker ComposeDocker <p>It is recommended to use <code>docker compose</code>:</p> <p>Example docker compose fil with two databases and a backup runner container<pre><code>services:\n  wodore-backend:\n    image: ghcr.io/wodore/wodore-backend:latest\n    restart: unless-stopped\n    container_name: wodore-backend\n</code></pre> Run a custom command:</p> <pre><code>$ docker compose up # start services\n$ docker compose run wodore-backend [OPTIONS] COMMAND [ARGS]... # (1)!\n</code></pre> <ol> <li>Run <code>db-backup-runner</code> subcommands.</li> </ol> <p>It is also possible to run it with docker directly:</p> Pull latest docker image<pre><code>$ docker pull ghcr.io/wodore/wodore-backend:latest\n$ docker run --rm -it ghcr.io/wodore/wodore-backend:latest\n</code></pre>"}]}